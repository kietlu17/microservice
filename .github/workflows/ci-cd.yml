name: CI - tests (docker compose)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Build services and run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env files for services
        run: |
          set -e
          mkdir -p api-gateway auth order product

          # api-gateway
          printf "AUTH_SERVICE='http://auth_service:3000'\n" > api-gateway/.env
          printf "ORDER_SERVICE='http://order_service:3002'\n" >> api-gateway/.env
          printf "PRODUCT_SERVICE='http://product_service:3001'\n" >> api-gateway/.env
          printf "PORT_API=3003\n" >> api-gateway/.env

          # auth
          printf "MONGODB_AUTH_URI=\"mongodb://mongodb/auth\"\n" > auth/.env
          printf "JWT_SECRET=\"secret\"\n" >> auth/.env

          # order
          printf "MONGODB_ORDER_URI='mongodb://mongodb/orders'\n" > order/.env
          printf "RABBITMQ_URI='amqp://rabbitmq?frameMax=0x2000'\n" >> order/.env
          printf "RABBITMQ_QUEUE_ORDERS='orders'\n" >> order/.env
          printf "RABBITMQ_QUEUE_PRODUCTS='products'\n" >> order/.env
          printf "PORT_ORDER=3002\n" >> order/.env

          # product (kept your original PORT_PROUDUCT and also add PORT_PRODUCT)
          printf "JWT_SECRET=\"secret\"\n" > product/.env
          printf "MONGODB_PRODUCT_URI=\"mongodb://mongodb/products\"\n" >> product/.env
          printf "MONGODB_ORDER_URI='mongodb://mongodb/orders'\n" >> product/.env
          printf "RABBITMQ_URI='amqp://rabbitmq?frameMax=0x2000'\n" >> product/.env
          printf "RABBITMQ_QUEUE_ORDERS='orders'\n" >> product/.env
          printf "RABBITMQ_QUEUE_PRODUCTS='products'\n" >> product/.env
          printf "PORT_PROUDUCT=3001\n" >> product/.env
          printf "PORT_PRODUCT=3001\n" >> product/.env
          printf "LOGIN_TEST_USER='testuser'\n" >> product/.env
          printf "LOGIN_TEST_PASSWORD='password'\n" >> product/.env

      - name: Build images
        run: |
          docker compose build --parallel

      - name: Start infra services (mongodb, rabbitmq)
        run: |
          docker compose up -d mongodb rabbitmq

      - name: Wait for MongoDB
        run: |
          echo "Waiting for MongoDB on port 27017..."
          for i in $(seq 1 30); do nc -z localhost 27017 && break || sleep 2; done

      - name: Wait for RabbitMQ management
        run: |
          echo "Waiting for RabbitMQ management on port 15672..."
          for i in $(seq 1 30); do nc -z localhost 15672 && break || sleep 2; done

      - name: Run tests inside auth container (one-off)
        run: |
          set -e
          docker compose run --rm auth npm test

      - name: Start auth service (detached) for product tests
        run: |
          docker compose up -d auth
          # give auth a moment to initialize
          sleep 5

      - name: Run tests inside product container (one-off)
        run: |
          set -e
          docker compose run --rm product npm test

      - name: Tear down compose
        if: always()
        run: |
          docker compose down --volumes --remove-orphans

      - name: Dump docker logs on failure
        if: failure()
        run: |
          docker compose ps || true
          docker compose logs --no-color || true